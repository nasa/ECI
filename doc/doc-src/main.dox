/*!
\mainpage Introduction
\section Background
The External Code Interface (ECI) is an application framework for the Core Slight System (CFS) environment.

According to https://cfs.gsfc.nasa.gov/:

> The core Flight System (cFS) is a platform and project independent reusable software framework and set of reusable 
> software applications.  There are three key aspects to the cFS architecture: 
> - a dynamic run-time environment, 
> - layered software, and 
> - a component based design.  
> 
> It is the combination of these key aspects that makes it suitable for reuse 
> on any number of NASA flight projects and/or embedded software systems at a significant cost savings.

\section sec_purpose Use cases for ECI:
ECI's primarily purpose is to provide a mechanism for executing code which was not writen as a CFS application 
(called external code) within a CFS environment. The CFE provides a robust API for managing an app's execution 
and provides a number of services commonly required in a flight software context to its apps, including:
- message passing, 
- parameter management, 
- and time management, amongst others. 

Code missing these API calls is unable to function in a CFS environment and the ECI addresses the fact that
there are several cases in which it may be impractical for a piece of code to utilize these CFE APIs. These situations
include (but are not limited to):
- Autogenerated Code, whose source may be difficult to modify/customize to produce the required API calls
- Legacy Code, which may be undesirable to modify on the basis of maintaining heritage or compatiblity with existing systems
- Complex algorithms, which may be made more complex by the additions of the CFE APIs within the code

The core of the ECI is a generic CFS application whose interfaces are configured by a user-provided interface definition,
which controls how an instantiation of an ECI app manages its CFS interfaces. Depending on the architecture of the external 
code, the ECI can typically manage the CFS interfaces with no (or minimal) changes to the external code.

The ECI also strives to be concious of resource limitations of embedded applications and so provides compile-time mechanism
to only enable needed functionality.

\section sec_heritage ECI Heritage:
The ECI started as a subcomponent of another tool, the <a href="https://github.com/nasa/SIL">Simulink Interface Layer 
(SIL)</a>, which aimed to smooth the process of generating code from Simulink models and integrating that code into
a CFS environment. The SIL contained two parts:
- an additional code generation target which extended the code generation pipeline to generate a definition of the 
generated code's interfaces
- and a framework which used that interface definition to setup and execute that code as a CFS environment.

That second component is now called the ECI.

The SIL/ECI has/is being used on a several NASA missions including LADEE, NICER, GEDI, and PACE and is actively 
maintained to meet the requirements of those missions and to stay current with ongoing development of the cFE/cFS.

\section sec_howto How to Read This Documentation:
These docs are intended to provide enough information to integrate your app with the ECI and as such we've tried
to preempt as many questions as possible. Since we are trying our best to provide a quick transition from
external code to a working cFS app, our documentation aims to provide the shortest route to a working application.
If you're not interested in learning the abstractions, feel free to start from one of our working examples and
modify it to your use case. If you're the kind of person that wishes to know the ins and outs of whatever framework
you're working with, we've hopefully included enough information to satiate your curiousity. In either case, we hope you
find these documents informative and the ECI framework a pleasure to work with.

\section sec_requirements ECI Integration Requirements:
The barebones nature of the ECI places some restrictions on the structure of apps that can be built with the ECI.
For most applications, we've noticed a subset of patterns that are already present or could be easily added to
external code without changing it's function.
  - The structure provided to ECI as a buffer, must be global.
  - The external code needs to provide a run loop to be executed on each
    tick of the ECI.

\section sec_components Main Components of the ECI:
As a framework intended to support the cFE, it's expected that we need to work within standard C constructs; that
being the case, we provide access to ECI's behavior using a header file named `eci_interface.h` ideally written by
a software developer knowledgable with the target external code. You can find more details on writing this
interface header \ref creating_eci_interface "here" or if you tend to learn better under example, we've
provided two examples in the `/examples` directory in the repository.

The ECI was designed to support most core CFE features such as:
- initialization, execution, and termination of application
- input/output message management with CFE Software Bus (SB)
- table management with CFE Table Services (TS)
- housekeeping counter management
- event services registration and event triggering
- Critical Data Store (CDS) nonvolatile storage of data

For a more in depth explaination of the inner workings of ECI, we've created several diagrams
indicating the order of events \ref diagrams "here".

\section quick_start Quick Start:
For people interested in getting their feet wet with the ECI, we've provided a quick start
section that covers building ECI apps with both the CFE 6.5 and 6.6 \ref example_build "here". This was indended as
a quick introduction and avoids the implementation details of integrating an ECI app.

\section sec_change_requests Change Requests and Community Involvement:
ECI development tries to be receptive towards issues posted on the official ECI repository on GitHub. If you find
yourself having trouble with something that hasn't been provided in this documentation, please consider opening an
issue. The development team for ECI is relatively small and we try to make improvements as we get the opportunity
but your feedback gives us a clearer picture of what our users expect from the ECI. 
*/
